version: '3.8'

services:
  # Main Application
  hnoss-app:
    build: .
    container_name: hnoss-landing-page
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DOMAIN=wwwKnowNowNoKnow.Rocks
      - SESSION_SECRET=${SESSION_SECRET}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    networks:
      - hnoss-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy with SSL/TLS
  nginx:
    image: nginx:alpine
    container_name: hnoss-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - hnoss-app
    networks:
      - hnoss-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Session Storage (Production)
  redis:
    image: redis:7-alpine
    container_name: hnoss-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure-redis-password}
    volumes:
      - redis-data:/data
    networks:
      - hnoss-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-secure-redis-password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Optional)
  postgres:
    image: postgres:15-alpine
    container_name: hnoss-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${PGDATABASE:-hnoss_db}
      - POSTGRES_USER=${PGUSER:-hnoss}
      - POSTGRES_PASSWORD=${PGPASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - hnoss-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-hnoss} -d ${PGDATABASE:-hnoss_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Monitoring (Optional)
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: hnoss-fail2ban
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - /var/log:/var/log:ro
      - ./fail2ban:/data
    environment:
      - TZ=UTC
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=30d

networks:
  hnoss-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local